---

# Namespace and basic material ------------------------------------------------

- name: Create namespace ({{ infra_namespace }})
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'namespace-im-infra.yaml.j2') }}"

- name: Create DockerHub image pull secret
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'secret-dh-imagepull.yaml.j2') }}"
    wait: yes
  vars:
    pull_namespace: "{{ infra_namespace }}"
    pull_secret: "{{ infra_dockerhub_pullsecret }}"
  when: infra_dockerhub_pullsecret | string | length > 0

- name: Create SA
  kubernetes.core.k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - serviceaccount-im-infra

- name: Create PSP
  kubernetes.core.k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - role-im-psp-unrestricted
  - rolebinding-im-infra-sa
  when: k8s_use_psp | bool

- name: Relax {{ infra_namespace }} 'default' service account (for cert-manager)
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'rolebinding-default-sa.yaml.j2') }}"
    wait: yes

# Secrets (optional S3 secrets) -----------------------------------------------

- when: pg_bu_s3_bucket_name | string | length > 0
  block:

  - name: Check S3 variables
    ansible.builtin.assert:
      that:
      - pg_bu_s3_access_key_id | string | length > 0
      - pg_bu_s3_default_region | string | length > 0
      - pg_bu_s3_secret_access_key | string | length > 0
      fail_msg: >-
        You have provided a value for 'pg_bu_s3_bucket_name'.
        You must provide values for all the other 'pg_bu_s3_' variables.

  - name: Check S3 secrets
    kubernetes.core.k8s_info:
      kind: Secret
      api_version: v1
      namespace: "{{ infra_namespace }}"
      name: im-s3
    register: s3_s_result

  - name: Set S3 secret facts
    ansible.builtin.set_fact:
      pg_bu_s3_default_region_fact: "{{ pg_bu_s3_default_region }}"
      pg_bu_s3_access_key_id_fact: "{{ pg_bu_s3_access_key_id }}"
      pg_bu_s3_secret_access_key_fact: "{{ pg_bu_s3_secret_access_key }}"
    when: s3_s_result.resources | length == 0

  - name: Set S3 secret facts (pre-deployed secrets)
    ansible.builtin.set_fact:
      pg_bu_s3_default_region_fact: "{{ s3_s_result.resources[0].data.default_region | b64decode }}"
      pg_bu_s3_access_key_id_fact: "{{ s3_s_result.resources[0].data.access_key_id | b64decode }}"
      pg_bu_s3_secret_access_key_fact: "{{ s3_s_result.resources[0].data.secret_access_key | b64decode }}"
    when: s3_s_result.resources | length == 1

  - name: Write S3 secrets
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'secret-s3.yaml.j2') }}"
      wait: yes
    when: s3_s_result.resources | length == 0

# Secrets (database) ----------------------------------------------------------

- name: Database Secrets
  block:

  - name: Check database (postgres) secrets
    kubernetes.core.k8s_info:
      kind: Secret
      api_version: v1
      namespace: "{{ infra_namespace }}"
      name: im-postgres
    register: pg_s_result

  - name: Set database secret facts
    ansible.builtin.set_fact:
      pg_user_fact: "{{ pg_user }}"
      pg_user_password_fact: "{{ pg_user_password }}"
      pg_database_fact: "{{ pg_database }}"
    when: pg_s_result.resources | length == 0

  - name: Set database secret facts (pre-deployed secrets)
    ansible.builtin.set_fact:
      pg_user_fact: "{{ pg_s_result.resources[0].data.database_admin_user | b64decode }}"
      pg_user_password_fact: "{{ pg_s_result.resources[0].data.database_admin_user_password | b64decode }}"
      pg_database_fact: "{{ pg_s_result.resources[0].data.database_name | b64decode }}"
    when: pg_s_result.resources | length == 1

  - name: Write Database secrets
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'secret-postgres.yaml.j2') }}"
      wait: yes
    when: pg_s_result.resources | length == 0

  - name: Display Database admin password
    ansible.builtin.debug:
      var: pg_user_password_fact

  when: pg_state | string == 'present'

# Secrets (Keycloak) ----------------------------------------------------------

- name: Keycloack secret
  block:

  - name: Check Keycloak secrets
    kubernetes.core.k8s_info:
      kind: Secret
      api_version: v1
      namespace: "{{ infra_namespace }}"
      name: im-keycloak
    register: kc_s_result

  - name: Set Keycloak secret facts
    set_fact:
      kc_db_password_fact: "{{ kc_db_password }}"
      kc_hostname_fact: "{{ kc_hostname }}"
      kc_admin_password_fact: "{{ kc_admin_password }}"
    when: kc_s_result.resources | length == 0

  - name: Set Keycloak secret facts (pre-deployed secrets)
    set_fact:
      kc_db_password_fact: "{{ kc_s_result.resources[0].data.database_user_password|b64decode }}"
      kc_hostname_fact: "{{ kc_s_result.resources[0].data.keycloak_hostname|b64decode }}"
      kc_admin_password_fact: "{{ kc_s_result.resources[0].data.keycloak_admin_user_password|b64decode }}"
    when: kc_s_result.resources|length == 1

  - name: Write Keycloak secrets
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'secret-keycloak.yaml.j2') }}"
      wait: yes
    when: kc_s_result.resources | length == 0

  - name: Display Keycloak database password
    ansible.builtin.debug:
      var: kc_db_password_fact

  - name: Display Keycloak admin password
    ansible.builtin.debug:
      var: kc_admin_password_fact

  when: kc_state | string == 'present'

# Database (postgres) ---------------------------------------------------------

- name: Postgres
  block:

  - name: Get {{ pg_vol_storageclass }} StorageClass
    kubernetes.core.k8s_info:
      kind: StorageClass
      name: "{{ pg_vol_storageclass }}"
    register: sc_result
    when: pg_vol_storageclass != " "

  - name: Assert {{ pg_vol_storageclass }} StorageClass
    ansible.builtin.assert:
      that: sc_result.resources | length == 1
      fail_msg: The {{ pg_vol_storageclass }} StorageClass must be available on the cluster
    when: pg_vol_storageclass != " "

  - name: Create postgres volume claim ({{ pg_vol_storageclass }})
    kubernetes.core.k8s:
      definition: "{{ lookup('template', 'pvc-postgres.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  # Best practice ... wait for the PVC to bind.
  # e.g. wait until resources[0].status.phase == Bound (initially Pending)

  - name: Wait for postgres volume claim to bind
    kubernetes.core.k8s_info:
      kind: PersistentVolumeClaim
      name: pg
      namespace: "{{ infra_namespace }}"
    register: pg_pvc_result
    until: >-
      pg_pvc_result.resources | length > 0
      and pg_pvc_result.resources[0].status is defined
      and pg_pvc_result.resources[0].status.phase is defined
      and pg_pvc_result.resources[0].status.phase == 'Bound'
    delay: 5
    retries: "{{ (bind_timeout | int / 5) | int }}"
    when: wait_for_bind | bool

  - name: Postgres
    kubernetes.core.k8s:
      definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"
    loop:
    - configmap-postgres-conf
    - configmap-postgres-init
    - service-postgres
    - statefulset-postgres

  - name: Wait for postgres to become Ready
    kubernetes.core.k8s_info:
      kind: Pod
      name: database-0
      namespace: "{{ infra_namespace }}"
    register: database_result
    until: >-
      database_result.resources | length == 1
      and database_result.resources[0].status is defined
      and database_result.resources[0].status.containerStatuses is defined
      and database_result.resources[0].status.containerStatuses|length == 1
      and database_result.resources[0].status.containerStatuses[0].ready
    delay: 30
    retries: "{{ (wait_timeout | int / 30) | int }}"

  when: pg_state | string == 'present'

# Database (backups) ----------------------------------------------------------

- name: Database backup
  include_tasks: deploy.yaml
  when: pg_bu_state | string == 'present'

# Keycloak --------------------------------------------------------------------

- name: Deploy Keycloak
  when: kc_state | string == 'present'
  block:

  - name: Keycloak assertions
    ansible.builtin.assert:
      that:
      - kc_cert_issuer in cert_issuer_set

  - name: Keycloak
    kubernetes.core.k8s:
      definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"
    loop:
    - service-keycloak
    - ingress-keycloak
    - statefulset-keycloak

  - name: Wait for keycloak to become Ready ({{ wait_timeout }} seconds)
    kubernetes.core.k8s_info:
      kind: Pod
      name: keycloak-0
      namespace: "{{ infra_namespace }}"
    register: keycloak_result
    until: >-
      keycloak_result.resources | length == 1
      and keycloak_result.resources[0].status is defined
      and keycloak_result.resources[0].status.containerStatuses is defined
      and keycloak_result.resources[0].status.containerStatuses|length == 1
      and keycloak_result.resources[0].status.containerStatuses[0].ready
    delay: 30
    retries: "{{ (wait_timeout | int / 30) | int }}"

# RabbitMQ --------------------------------------------------------------------

- name: Deploy RabbitMQ
  include_tasks: deploy-rabbitmq.yaml
  when: rabbitmq_state|string == 'present'
