---

# Get the region we're in (from the first node)

- name: Get cluster nodes
  kubernetes.core.k8s_info:
    kind: Node
  register: cluster_result

- name: Check node result
  assert:
    that: cluster_result.resources|length > 0

- name: Set cluster facts (from first node)
  set_fact:
    cluster_region: "{{ cluster_result.resources[0].metadata.labels['failure-domain.beta.kubernetes.io/region'] }}"
    cluster_instance: "{{ cluster_result.resources[0].spec.providerID.split('/')[-1] }}"

- name: Display cluster facts
  debug:
    msg: region={{ cluster_region }} instance={{ cluster_instance }}

# Does an EFS exist?

- name: Get existing EFS info
  efs_info:
    region: "{{ cluster_region }}"
    name: "{{ efs_backing_volume_name }}"
  register: existing_efs_result

- block:

  - include_tasks: deploy-efs.yaml

  - name: Get new EFS info
    efs_info:
      region: "{{ cluster_region }}"
      name: "{{ efs_backing_volume_name }}"
    register: new_efs_result

  - name: Set EFS facts from new
    set_fact:
      cluster_efs_address: "{{ new_efs_result.efs[0].filesystem_address.split(':')[0] }}"
      cluster_efs_id: "{{ new_efs_result.efs[0].file_system_id }}"

  when: existing_efs_result.efs|length == 0

- block:

  - name: Set EFS facts from existing
    set_fact:
      cluster_efs_address: "{{ existing_efs_result.efs[0].filesystem_address.split(':')[0] }}"
      cluster_efs_id: "{{ existing_efs_result.efs[0].file_system_id }}"

  when: existing_efs_result.efs|length == 1

- name: Display key EFS facts
  debug:
    msg: addr={{ cluster_efs_address }} id={{ cluster_efs_id }}

# EFS has been created (or already exists).
# We now need to install an EFS provisioner and create a StorageClass

- name: Deploy namespace
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  loop:
  - namespace

- name: Create DockerHub image pull secret
  k8s:
    definition: "{{ lookup('template', 'secret-dh-imagepull.yaml.j2') }}"
    wait: yes
  vars:
    pull_namespace: "{{ efs_namespace }}"
    pull_secret: "{{ infra_dockerhub_pullsecret }}"
  when: infra_dockerhub_pullsecret|string|length > 0

- name: Deploy
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  loop:
  - serviceaccount
  - clusterrole
  - clusterrolebinding
  - configmap
  - deployment
  - storageclass
