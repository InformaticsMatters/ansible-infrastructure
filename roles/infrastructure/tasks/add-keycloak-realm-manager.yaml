---

# It is assumed the Keycloak 'Realm' ({{ kc_realm }}) exists.

- name: Assert Manager variables
  assert:
    that:
    - kc_manager_fact is defined
    - kc_manager_fact|length > 0
    - kc_manager_password_fact is defined
    - kc_manager_password_fact|length > 0
    - kc_hostname is defined
    - kc_hostname|length > 0

# The actions for getting the KeyCloak token
# are located in an infra role playbook.
#
# By default it gets a token from the 'manager' account
# but we don't have a manager yet so get a token from the admin account...
#
# The realm is assumed to exist,
# it's created by a prior play.

- include_tasks: get-keycloak-token.yaml
  vars:
    realm: master
    realm_user: "{{ kc_admin_fact }}"
    realm_user_password: "{{ kc_admin_password_fact }}"

# A convenient variable representing the constant part
# for all the URI requests we make...

- name: Set API endpoint
  set_fact:
    keycloak_endpoint: https://{{ kc_hostname }}/auth/admin/realms/{{ kc_realm }}

# Check and create the manager (in the kc_realm)...

- name: Query manager account
  uri:
    url: "{{ keycloak_endpoint }}/users?username={{ kc_manager_fact }}"
    headers:
      Authorization: bearer {{ kc_token }}
  register: manager_user
  changed_when: False

- name: Get manager user ID
  set_fact:
    kc_manager_user_id: "{{ manager_user|json_query('json[0].id') }}"

- name: Display manager user ID
  debug:
    var: kc_manager_user_id

# Create the manager account if it does not exist...

- include_tasks: add-keycloak-realm-manager-user.yaml
  when:
  - kc_manager_user_id|length == 0
  - kc_manager_password_fact is defined

- name: Assert user ID
  assert:
    that:
    - kc_manager_user_id is defined
    - kc_manager_user_id|string|length > 0

# Now get the 'realm-management' client ID
# so we can lookup the available roles it provides...
# We need the client ID to make calls, its name if of little use
# when  used in other calls.

- name: Get realm-management client ID
  uri:
    url: "{{ keycloak_endpoint }}/clients?clientId=realm-management"
    headers:
      Authorization: bearer {{ kc_token }}
  register: rm_client_id

- name: Set realm-management client ID
  set_fact:
    client_id: "{{ rm_client_id.json[0].id }}"

# Now get the Roles available from the 'real-management' client...
# We're looking for the 'realm-admin' role so we can get its ID...

- name: Get available realm-management roles
  uri:
    url: "{{ keycloak_endpoint }}/{{ method }}"
    headers:
      Authorization: bearer {{ kc_token }}
  register: rm_roles
  vars:
    method: users/{{ kc_manager_user_id }}/role-mappings/clients/{{ client_id }}/available

# 'realm-admin' might not be in the 'available' list.
# It isn't if the role's already assigned,
# so we need to protect ourselves from not finding it...

- name: Search for realm-admin role ID
  set_fact:
    realm_admin_id_list: "{{ rm_roles|json_query(query) }}"
  vars:
    query: "json[?name=='realm-admin'].id"

- name: Get realm-admin role ID
  set_fact:
    realm_admin_id: "{{ realm_admin_id_list[0] }}"
  when:
  - realm_admin_id_list is defined
  - realm_admin_id_list|length > 0

# Now, finally, add the role to the manager account...

- name: Assign realm-management/realm-admin role to user
  uri:
    url: "{{ keycloak_endpoint }}/{{ method }}"
    method: POST
    body: >-
      [{"clientRole": "true",
        "composite": "true",
        "id": "{{ realm_admin_id }}",
        "name": "realm-admin"}]
    body_format: json
    status_code: 204
    headers:
      Authorization: bearer {{ kc_token }}
  vars:
    method: users/{{ kc_manager_user_id }}/role-mappings/clients/{{ client_id }}
  when:
  - realm_admin_id is defined
