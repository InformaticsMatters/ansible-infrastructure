---

- name: Creating namespace '{{ infra_namespace }}'
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - namespace-im-infra
  - serviceaccount-im-infra
  - role-im-psp-unrestricted
  - rolebinding-im-infra-sa

- name: Relax {{ infra_namespace }} 'default' service account (for cert-manager)
  k8s:
    definition: "{{ lookup('template', 'rolebinding-default-sa.yaml.j2') }}"
    wait: yes
  when: cm_state|string == 'present'

# Secrets (database) ----------------------------------------------------------

- name: Check database (postgres) secrets
  k8s_facts:
    kind: Secret
    api_version: v1
    namespace: "{{ infra_namespace }}"
    name: im-postgres
  register: pg_s_result

- name: Set database secret facts
  set_fact:
    pg_user_fact: "{{ pg_user }}"
    pg_user_password_fact: "{{ pg_user_password }}"
    pg_database_fact: "{{ pg_database }}"
  when: pg_s_result.resources|length == 0

- name: Set database secret facts (pre-deployed secrets)
  set_fact:
    pg_user_fact: "{{ pg_s_result.resources[0].data.database_admin_user|b64decode }}"
    pg_user_password_fact: "{{ pg_s_result.resources[0].data.database_admin_user_password|b64decode }}"
    pg_database_fact: "{{ pg_s_result.resources[0].data.database_name|b64decode }}"
  when: pg_s_result.resources|length == 1

- name: Write Database secrets
  k8s:
    definition: "{{ lookup('template', 'secret-postgres.yaml.j2') }}"
    wait: yes
  when: pg_s_result.resources|length == 0

- name: Display Database admin password
  debug:
    var: pg_user_password_fact

# Secrets (AWX database) ------------------------------------------------------

- name: Check AWX database secrets
  k8s_facts:
    kind: Secret
    api_version: v1
    namespace: "{{ infra_namespace }}"
    name: im-awx
  register: awx_s_result

- name: Set AWX database secret facts
  set_fact:
    ax_user_fact: "{{ ax_user }}"
    ax_user_password_fact: "{{ ax_user_password }}"
    ax_database_fact: "{{ ax_database }}"
    ax_admin_fact: "{{ ax_admin }}"
    ax_admin_password_fact: "{{ ax_admin_password }}"
  when: awx_s_result.resources|length == 0

- name: Set AWX database secret facts (pre-deployed secrets)
  set_fact:
    ax_user_fact: "{{ awx_s_result.resources[0].data.database_user|b64decode }}"
    ax_user_password_fact: "{{ awx_s_result.resources[0].data.database_user_password|b64decode }}"
    ax_database_fact: "{{ awx_s_result.resources[0].data.database_name|b64decode }}"
    ax_admin_fact: "{{ awx_s_result.resources[0].data.ax_admin|b64decode }}"
    ax_admin_password_fact: "{{ awx_s_result.resources[0].data.ax_admin_password|b64decode }}"
  when: awx_s_result.resources|length == 1

- name: Write AWX database secrets
  k8s:
    definition: "{{ lookup('template', 'secret-awx.yaml.j2') }}"
    wait: yes
  when: awx_s_result.resources|length == 0

- name: Display AWX database password
  debug:
    var: ax_user_password_fact

- name: Display AWX console admin user and password
  debug:
    msg: AWX console admin user - {{ ax_admin_fact }}/{{ ax_admin_password_fact }}

# Secrets (Keycloak) ----------------------------------------------------------

- name: Check Keycloak secrets
  k8s_facts:
    kind: Secret
    api_version: v1
    namespace: "{{ infra_namespace }}"
    name: im-keycloak
  register: kc_s_result

- name: Set Keycloak secret facts
  set_fact:
    kc_user_fact: "{{ kc_user }}"
    kc_user_password_fact: "{{ kc_user_password }}"
    kc_database_fact: "{{ kc_database }}"
    kc_hostname_fact: "{{ kc_hostname }}"
    kc_admin_fact: "{{ kc_admin }}"
    kc_admin_password_fact: "{{ kc_admin_password }}"
  when: kc_s_result.resources|length == 0

- name: Set Keycloak secret facts (pre-deployed secrets)
  set_fact:
    kc_user_fact: "{{ kc_s_result.resources[0].data.database_user|b64decode }}"
    kc_user_password_fact: "{{ kc_s_result.resources[0].data.database_user_password|b64decode }}"
    kc_database_fact: "{{ kc_s_result.resources[0].data.database_name|b64decode }}"
    kc_hostname_fact: "{{ kc_s_result.resources[0].data.keycloak_hostname|b64decode }}"
    kc_admin_fact: "{{ kc_s_result.resources[0].data.keycloak_admin_user|b64decode }}"
    kc_admin_password_fact: "{{ kc_s_result.resources[0].data.keycloak_admin_user_password|b64decode }}"
  when: kc_s_result.resources|length == 1

- name: Write Keycloak secrets
  k8s:
    definition: "{{ lookup('template', 'secret-keycloak.yaml.j2') }}"
    wait: yes
  when: kc_s_result.resources|length == 0

- name: Display Keycloak database password
  debug:
    var: kc_user_password_fact

- name: Display Keycloak admin password
  debug:
    var: kc_admin_password_fact

# Database (postgres) ---------------------------------------------------------

- name: Get {{ pg_vol_storageclass }} StorageClass
  k8s_facts:
    kind: StorageClass
    name: "{{ pg_vol_storageclass }}"
  register: sc_result
  when: pg_vol_storageclass != " "

- name: Assert {{ pg_vol_storageclass }} StorageClass
  assert:
    that: sc_result.resources|length == 1
    fail_msg: The {{ pg_vol_storageclass }} StorageClass must be available on the cluster
  when: pg_vol_storageclass != " "

- name: Create postgres volume claim ({{ pg_vol_storageclass }})
  k8s:
    definition: "{{ lookup('template', 'pvc-postgres.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"

# Best practice ... wait for the PVC to bind.
# e.g. wait until resources[0].status.phase == Bound (initially Pending)

- name: Wait for postgres volume claim to bind
  k8s_facts:
    kind: PersistentVolumeClaim
    name: pg-pvc
    namespace: "{{ infra_namespace }}"
  register: pg_pvc_result
  until: pg_pvc_result.resources[0].status.phase == 'Bound'
  delay: 5
  retries: "{{ (bind_timeout|int / 5)|int }}"

- name: Postgres
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ wait_timeout }}"
  loop:
  - configmap-postgres-conf
  - configmap-postgres-init
  - service-postgres
  - statefulset-postgres

- name: Wait for postgres to become Ready
  k8s_facts:
    kind: Pod
    name: database-0
    namespace: "{{ infra_namespace }}"
  register: database_result
  until: >-
    database_result.resources|length == 1
    and database_result.resources[0].status.containerStatuses|length == 1
    and database_result.resources[0].status.containerStatuses[0].ready
  delay: 10
  retries: "{{ (wait_timeout|int / 10)|int }}"

# Database (backups) ----------------------------------------------------------

- name: Database backup
  block:

  - name: Get {{ pg_bu_vol_storageclass }} StorageClass
    k8s_facts:
      kind: StorageClass
      name: "{{ pg_bu_vol_storageclass }}"
    register: sc_result
    when: pg_bu_vol_storageclass != " "

  - name: Assert {{ pg_bu_vol_storageclass }} StorageClass
    assert:
      that: sc_result.resources|length == 1
      fail_msg: The {{ pg_bu_vol_storageclass }} StorageClass must be available on the cluster
    when: pg_bu_vol_storageclass != " "

  - name: Create postgres backup volume claim ({{ pg_bu_vol_storageclass }})
    k8s:
      definition: "{{ lookup('template', 'pvc-postgres-backup.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  - name: Wait for postgres backup volume claim to bind
    k8s_facts:
      kind: PersistentVolumeClaim
      name: pg-bu-pvc
      namespace: "{{ infra_namespace }}"
    register: pg_bu_pvc_result
    until: pg_bu_pvc_result.resources[0].status.phase == 'Bound'
    delay: 5
    retries: "{{ (bind_timeout|int / 5)|int }}"

  - name: Deploy hourly backup
    k8s:
      definition: "{{ lookup('template', 'cronjob-postgres-backup.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"

  when: pg_bu_state|string == 'present'

# Keycloak --------------------------------------------------------------------

- name: Deploy Keycloak
  block:

  - name: Keycloak assertions
    assert:
      that:
      - kc_cert_issuer in cert_issuer_set

  - name: Keycloak
    k8s:
      definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ wait_timeout }}"
    loop:
    - service-keycloak
    - statefulset-keycloak

  - name: Wait for keycloak to become Ready
    k8s_facts:
      kind: Pod
      name: keycloak-0
      namespace: "{{ infra_namespace }}"
    register: keycloak_result
    until: >-
      keycloak_result.resources|length == 1
      and keycloak_result.resources[0].status.containerStatuses|length == 1
      and keycloak_result.resources[0].status.containerStatuses[0].ready
    delay: 30
    retries: "{{ (wait_timeout|int / 30)|int }}"

  - name: Keycloak ingress
    k8s:
      definition: "{{ lookup('template', 'ingress-keycloak.yaml.j2') }}"

  when: kc_state|string == 'present'

# AWX -------------------------------------------------------------------------

# Check the AWX StatefulSet existence.
# If it's already present we do not re-render or deploy.

- name: Deploy AWX
  block:

  - name: AWX assertions
    assert:
      that:
      - ax_cert_issuer in cert_issuer_set

  - name: Check AWX stateful set
    k8s_facts:
      kind: StatefulSet
      namespace: "{{ infra_namespace }}"
      name: awx
    register: ax_ss_result

  - name: AWX pre-flight check
    assert:
      that:
      - ax_admin|length > 0
      - ax_admin != 'SetMe'
      - ax_admin_password|length > 0
      - ax_admin_password != 'SetMe'
    when:
    - ax_ss_result.resources|length == 0

  - name: Ensure AWX clone directory
    file:
      path: "{{ ax_clone_dir }}"
      state: directory
    when:
    - ax_ss_result.resources|length == 0

  - name: Remove existing AWX clone directory
    file:
      path: "{{ ax_clone_dir }}/awx"
      state: absent
    when:
    - ax_ss_result.resources|length == 0

  - name: Clone AWX {{ ax_version }} (into {{ ax_clone_dir }})
    git:
      repo: https://github.com/ansible/awx.git
      dest: "{{ ax_clone_dir }}/awx"
      version: "{{ ax_version }}"
      force: yes
    when:
    - ax_ss_result.resources|length == 0

  - name: Set AWX inventory file fact
    set_fact:
      inventory_file: "{{ ax_clone_dir }}/awx/installer/inventory"
    when:
    - ax_ss_result.resources|length == 0

  - import_tasks: render-awx-{{ ax_version }}-{{ ax_platform }}.yaml
    when:
    - ax_ss_result.resources|length == 0

  # Now that the cloned installation has been rendered
  # for the chosen AWX version and platform, run the installer (asynchronously),
  # giving it up to 15 minutes to complete...

  # We need to provide ability for AWX service account
  # to act in the infrastructure namespace.

  - name: Relax {{ infra_namespace }} 'awx' service account
    k8s:
      definition: "{{ lookup('template', 'rolebinding-awx-sa.yaml.j2') }}"
      wait: yes

  - name: Deploy AWX (into {{ infra_namespace }})
    command: ansible-playbook -i inventory install.yml
    args:
      chdir: "{{ ax_clone_dir }}/awx/installer"
    async: "{{ 15 * 60 }}"
    when:
    - ax_ss_result.resources|length == 0

  when: ax_state|string == 'present'
